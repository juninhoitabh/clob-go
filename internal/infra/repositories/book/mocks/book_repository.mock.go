// Code generated by MockGen. DO NOT EDIT.
// Source: /clob_go/internal/domain/book/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	book "github.com/juninhoitabh/clob-go/internal/domain/book"
)

// MockIBookRepository is a mock of IBookRepository interface.
type MockIBookRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIBookRepositoryMockRecorder
}

// MockIBookRepositoryMockRecorder is the mock recorder for MockIBookRepository.
type MockIBookRepositoryMockRecorder struct {
	mock *MockIBookRepository
}

// NewMockIBookRepository creates a new mock instance.
func NewMockIBookRepository(ctrl *gomock.Controller) *MockIBookRepository {
	mock := &MockIBookRepository{ctrl: ctrl}
	mock.recorder = &MockIBookRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBookRepository) EXPECT() *MockIBookRepositoryMockRecorder {
	return m.recorder
}

// GetBook mocks base method.
func (m *MockIBookRepository) GetBook(instrument string) (*book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", instrument)
	ret0, _ := ret[0].(*book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockIBookRepositoryMockRecorder) GetBook(instrument interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockIBookRepository)(nil).GetBook), instrument)
}

// SaveBook mocks base method.
func (m *MockIBookRepository) SaveBook(book *book.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBook", book)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBook indicates an expected call of SaveBook.
func (mr *MockIBookRepositoryMockRecorder) SaveBook(book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBook", reflect.TypeOf((*MockIBookRepository)(nil).SaveBook), book)
}
